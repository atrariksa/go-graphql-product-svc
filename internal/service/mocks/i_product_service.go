// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "go-graphql-product-svc/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// IProductService is an autogenerated mock type for the IProductService type
type IProductService struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *IProductService) CreateProduct(ctx context.Context, product model.Product) (*model.Product, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) (*model.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) *model.Product); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *IProductService) DeleteProduct(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProduct provides a mock function with given fields: ctx
func (_m *IProductService) GetAllProduct(ctx context.Context) *[]model.Product {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProduct")
	}

	var r0 *[]model.Product
	if rf, ok := ret.Get(0).(func(context.Context) *[]model.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Product)
		}
	}

	return r0
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *IProductService) GetProductByID(ctx context.Context, id string) (*model.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, id, product
func (_m *IProductService) UpdateProduct(ctx context.Context, id string, product model.Product) (*model.Product, error) {
	ret := _m.Called(ctx, id, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Product) (*model.Product, error)); ok {
		return rf(ctx, id, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Product) *model.Product); ok {
		r0 = rf(ctx, id, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.Product) error); ok {
		r1 = rf(ctx, id, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductService creates a new instance of IProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductService {
	mock := &IProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
